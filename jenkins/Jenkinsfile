//  Jenkins Pipeline for CI/CD Integration

pipeline {
    agent any
    
    environment {
        DOCKERHUB_USERNAME = 'tzachaker'
        IMAGE_NAME = "${DOCKERHUB_USERNAME}/flask-aws-monitor"
    }
    
    stages {
        stage('Initialize') {
            steps {
                echo "Initializing pipeline..."
            }
        }
        
        stage('Clone Repository') {
            steps {
                echo "Cloning repository from GitHub..."
                git branch: 'jenkins', url: 'https://github.com/tzachaker/devops-final-exam.git'
                echo "Repository cloned successfully!"
            }
        }
        
        stage('Code Quality and Security Checks') {
            parallel {
                stage('Linting') {
                    steps {
                        echo "Running linting checks"
                        echo "Flake8 linting "
                        echo "Hadolint for Dockerfile "
                        echo "ShellCheck "
                    }
                }
                stage('Security Scan') {
                    steps {
                        echo "Running security scans..."
                        echo "Trivy for Docker image"
                        echo "Bandit for Python"
                    }
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            steps {
                echo "Building Docker image..."
                dir('app') {
                    sh 'docker build -t ${IMAGE_NAME}:latest .'
                }
                echo "Docker image built successfully!"
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                echo "Logging in to Docker Hub..."
                withCredentials([usernamePassword(credentialsId: 'dockerhub-password', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                    sh 'echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin'
                    echo "Pushing Docker image to repository..."
                    sh 'docker push ${IMAGE_NAME}:latest'
                    echo "Docker image pushed successfully!"
                }
            }
        }
    }
    
    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed! Check logs for details."
        }
    }
}
